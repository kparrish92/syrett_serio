)) %>%
group_by(exp2_pred) %>%
summarise(exp_prob = sum(pct))
FinalData %>% ### find sd
group_by(Rating, CategoryType, Participant) %>%
summarize(n = n()) %>% mutate(pct = n/6) %>%
filter(CategoryType == "Abstract") %>%
mutate(exp2_pred = case_when(
Rating == 1 | Rating == 2 ~ "is",
Rating == 3 | Rating == 4 | Rating == 5 ~ "both",
Rating == 6 | Rating == 7 ~ "is_not",
))
FinalData %>% ### find sd
group_by(Rating, CategoryType, Participant) %>%
summarize(n = n()) %>% mutate(pct = n/6) %>%
filter(CategoryType == "Abstract") %>%
mutate(exp2_pred = case_when(
Rating == 1 | Rating == 2 ~ "is",
Rating == 3 | Rating == 4 | Rating == 5 ~ "both",
Rating == 6 | Rating == 7 ~ "is_not",
)) %>%
group_by(exp2_pred) %>%
summarise(exp_prob = sum(pct))
FinalData %>% ### find sd
group_by(Rating, CategoryType, Participant) %>%
summarize(n = n()) %>% mutate(pct = n/6) %>%
filter(CategoryType == "Abstract") %>%
mutate(exp2_pred = case_when(
Rating == 1 | Rating == 2 ~ "is",
Rating == 3 | Rating == 4 | Rating == 5 ~ "both",
Rating == 6 | Rating == 7 ~ "is_not",
))
d = FinalData %>% ### find sd
group_by(Rating, CategoryType, Participant) %>%
summarize(n = n()) %>% mutate(pct = n/6) %>%
filter(CategoryType == "Abstract") %>%
mutate(exp2_pred = case_when(
Rating == 1 | Rating == 2 ~ "is",
Rating == 3 | Rating == 4 | Rating == 5 ~ "both",
Rating == 6 | Rating == 7 ~ "is_not",
))
View(d)
FinalData %>% ### find sd
group_by(Rating, CategoryType, Participant) %>%
summarize(n = n()) %>% mutate(pct = n/6) %>%
filter(CategoryType == "Abstract") %>%
mutate(exp2_pred = case_when(
Rating == 1 | Rating == 2 ~ "is",
Rating == 3 | Rating == 4 | Rating == 5 ~ "both",
Rating == 6 | Rating == 7 ~ "is_not",
)) %>%
group_by(exp2_pred, Participant) %>%
summarise(exp_prob = sum(pct))
d = FinalData %>% ### find sd
group_by(Rating, CategoryType, Participant) %>%
summarize(n = n()) %>% mutate(pct = n/6) %>%
filter(CategoryType == "Abstract") %>%
mutate(exp2_pred = case_when(
Rating == 1 | Rating == 2 ~ "is",
Rating == 3 | Rating == 4 | Rating == 5 ~ "both",
Rating == 6 | Rating == 7 ~ "is_not",
)) %>%
group_by(exp2_pred, Participant) %>%
summarise(exp_prob = sum(pct))
FinalData %>% ### find sd
group_by(Rating, CategoryType, Participant) %>%
summarize(n = n()) %>% mutate(pct = n/6) %>%
filter(CategoryType == "Abstract") %>%
mutate(exp2_pred = case_when(
Rating == 1 | Rating == 2 ~ "is",
Rating == 3 | Rating == 4 | Rating == 5 ~ "both",
Rating == 6 | Rating == 7 ~ "is_not",
)) %>%
group_by(exp2_pred, Participant) %>%
summarise(exp_prob = sum(pct)) %>%
group_by(exp2_pred) %>%
summarise(mean_prob = mean(exp_prob),
sd_prob = sd(exp_prob))
senses_tidy = read.csv(here("data", "tidy", "senses_tidy.csv"))
senses_tidy %>%
group_by(Selection) %>%
summarise(n = n())
get_prior(b2)
prior_check = c(set_prior("normal(-2, 1)", class = "Intercept", dpar = "muis"),
set_prior("normal(-1, 1)", class = "Intercept", dpar = "muisnot"),
set_prior("normal(-3, 1)", class = "b", dpar = "muIs", coef = "CategoryTypeNatural"))
b2 <- brm(Selection ~ CategoryType + (CategoryType | Participant),
data=senses_tidy,
family="categorical")
get_prior(b2)
data_is = data.frame(answer = rbinom(n = 20, size = 1, prob = .5), answer_t = "is")
data_is_not = data.frame(answer = rbinom(n = 20, size = 1, prob = .5), answer_t = "is_not")
data_both = data.frame(answer = rbinom(n = 20, size = 1, prob = .5), answer_t = "both")
?rmultinom
rmultinom(10, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(10, size = 6, prob = c(0.33,0.33,0.33))
rmultinom(10, size = 6, prob = c(0.33,0.33,0.33))
rmultinom(10, size = 6, prob = c(0.33,0.33,0.33))
rmultinom(10, size = 6, prob = c(0.33,0.33,0.33))
rmultinom(10, size = 6, prob = c(0.33,0.33,0.33))
rmultinom(10, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame()
rmultinom(10, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame()
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame()
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame()
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame()
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame()
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame()
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame()
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame()
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not"))
# nppts, noreps, probs of cond
## Vectors are ppts
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
ungroup()
?
ungroup
?ungroup
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
uncount(weights = n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
uncount(answer = n)
df <- tibble(x = c("a", "b"), n = c(1, 2))
df
uncount(df, n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not"))
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(V1 == n)
## Vectors are ppts
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n == V1)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n == "V1")
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1")
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
rmultinom(1, size = 6, prob = c(0.33,0.33,0.33)) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
probs = c(0.33,0.33,0.33)
ppt_name = "1"
cond_name = "Abstract"
rmultinom(1, size = 6, prob = probs) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
pptdf = rmultinom(1, size = 6, prob = probs) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
pptdf = rmultinom(1, size = 6, prob = probs) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
pptdf$ppt = ppt_name
pptdf
pptdf = rmultinom(1, size = 6, prob = probs) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
pptdf$ppt = ppt_name
pptdf$condition = cond_name
pptdf
probs = c(0.33,0.33,0.33)
ppt_name = "ppt_1"
cond_name = "Abstract"
sim_ppt = function(probs, ppt_name)
pptdf = rmultinom(1, size = 6, prob = probs) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
pptdf$ppt = ppt_name
pptdf$condition = cond_name
pptdf
sim_ppt = function(probs, ppt_name)
{
pptdf = rmultinom(1, size = 6, prob = probs) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
pptdf$ppt = ppt_name
pptdf$condition = cond_name
return(pptdf)
}
sim_ppt = function(probs, ppt_name, cond_name)
{
pptdf = rmultinom(1, size = 6, prob = probs) %>% as.data.frame() %>%
mutate(answer = c("is", "both", "is_not")) %>%
rename(n = "V1") %>%
uncount(n)
pptdf$ppt = ppt_name
pptdf$condition = cond_name
return(pptdf)
}
sim_ppt (probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
sim_ppt(probs, ppt_name, cond_name)
for (i in 1:48) {
sim_ppt(c(0.33,0.33,0.33), ppt_name, "abstract")
sim_ppt(c(.8,.15,.05), ppt_name, "natural_kind")
}
sim_ppt(c(0.33,0.33,0.33), ppt_name, "abstract")
sim_ppt(c(.8,.15,.05), ppt_name, "natural_kind")
}
sim_ppt(c(0.33,0.33,0.33), ppt_name, "abstract")
sim_ppt(c(.8,.15,.05), ppt_name, "natural_kind")
}
sim_ppt(c(0.33,0.33,0.33), ppt_name, "abstract")
sim_ppt(c(.8,.15,.05), ppt_name, "natural_kind")
}
i=1
sim_ppt(c(0.33,0.33,0.33), ppt_name = paste0("ppt_",i), "abstract")
sim_ppt(c(0.33,0.33,0.33), ppt_name = paste0("ppt_",i), "abstract")
adf = sim_ppt(c(0.33,0.33,0.33), ppt_name = paste0("ppt_",i), "abstract")
nkdf = sim_ppt(c(.8,.15,.05), ppt_name = paste0("ppt_",i), "natural_kind")
binddf = rbind(adf,nkdf)
binddf
for (i in 1:48) {
adf = sim_ppt(c(0.33,0.33,0.33), ppt_name = paste0("ppt_",i), "abstract")
nkdf = sim_ppt(c(.8,.15,.05), ppt_name = paste0("ppt_",i), "natural_kind")
binddf[[i]] = rbind(adf,nkdf)
}
do.call(rbind,df_list)
do.call(rbind,df_list)
df_list = list()
for (i in 1:48) {
adf = sim_ppt(c(0.33,0.33,0.33), ppt_name = paste0("ppt_",i), "abstract")
nkdf = sim_ppt(c(.8,.15,.05), ppt_name = paste0("ppt_",i), "natural_kind")
binddf[[i]] = rbind(adf,nkdf)
}
do.call(rbind,df_list)
df_list
df_list = list()
for (i in 1:48) {
adf = sim_ppt(c(0.33,0.33,0.33), ppt_name = paste0("ppt_",i), "abstract")
nkdf = sim_ppt(c(.8,.15,.05), ppt_name = paste0("ppt_",i), "natural_kind")
binddf = rbind(adf,nkdf)
df_list[[i]] = binddf
}
do.call(rbind,df_list)
sim_df = do.call(rbind,df_list)
sim_df = do.call(rbind,df_list)
glimpse(sim_df)
sim_df %>%
group_by(answer, condition) %>%
summarize(n = n())
sim_df %>%
group_by(condition) %>%
summarize(n = n())
sim_df %>%
group_by(answer, condition) %>%
summarize(n = n())
sim_df %>%
group_by(answer, condition) %>%
summarize(n = n()/288)
View(sim_df)
View(senses_tidy)
sim_df %>%
group_by(answer, condition) %>%
summarize(n = n()/288)
sim_model = brm(answer ~ condition,
data=sim_df,
family="categorical")
conditional_effects(sim_model)
conditional_effects(sim_model, categorical = TRUE)
summary(sim_model)
get_prior(sim_model)
summary(sim_model)
sim_df %>%
group_by(answer, condition) %>%
summarize(n = n()/288)
FinalData %>% ### find sd
group_by(Rating, CategoryType, Participant) %>%
summarize(n = n()) %>% mutate(pct = n/6) %>%
filter(CategoryType == "Abstract") %>%
mutate(exp2_pred = case_when(
Rating == 1 | Rating == 2 ~ "is",
Rating == 3 | Rating == 4 | Rating == 5 ~ "both",
Rating == 6 | Rating == 7 ~ "is_not",
)) %>%
group_by(exp2_pred, Participant) %>%
summarise(exp_prob = sum(pct)) %>%
group_by(exp2_pred) %>%
summarise(mean_prob = mean(exp_prob),
sd_prob = sd(exp_prob))
FinalData %>%
group_by(Rating, CategoryType) %>%
summarize(n = n()) %>% mutate(pct = n/282) %>%
filter(CategoryType == "Abstract") %>%
mutate(exp2_pred = case_when(
Rating == 1 | Rating == 2 ~ "is",
Rating == 3 | Rating == 4 | Rating == 5 ~ "both",
Rating == 6 | Rating == 7 ~ "is_not",
)) %>%
group_by(exp2_pred) %>%
summarise(exp_prob = sum(pct))
FinalData %>%
group_by(Rating, CategoryType) %>%
summarize(n = n()) %>% mutate(pct = n/282) %>%
filter(CategoryType == "Natural") %>%
mutate(exp2_pred = case_when(
Rating == 1 | Rating == 2 ~ "is",
Rating == 3 | Rating == 4 | Rating == 5 ~ "both",
Rating == 6 | Rating == 7 ~ "is_not",
)) %>%
group_by(exp2_pred) %>%
summarise(exp_prob = sum(pct))
FinalData %>%
group_by(Rating, CategoryType) %>%
summarize(n = n()) %>% mutate(pct = n/282) %>%
filter(CategoryType == "Artifact") %>%
mutate(exp2_pred = case_when(
Rating == 1 | Rating == 2 ~ "is",
Rating == 3 | Rating == 4 | Rating == 5 ~ "both",
Rating == 6 | Rating == 7 ~ "is_not",
)) %>%
group_by(exp2_pred) %>%
summarise(exp_prob = sum(pct))
# is 1-2
probs = c(0.34,0.30,0.36) # both,is,inot
abs_probs = c(0.34,0.30,0.36)
nat_probs = c(0.22,0.04,0.74)
art_probs = c(0.35,0.1,0.55)
df_list = list()
for (i in 1:48) {
adf = sim_ppt(abs_probs, ppt_name = paste0("ppt_",i), "abstract")
nkdf = sim_ppt(nat_probs, ppt_name = paste0("ppt_",i), "natural_kind")
atdf = sim_ppt(art_probs, ppt_name = paste0("ppt_",i), "artifact")
binddf = rbind(adf,nkdf,atdf)
df_list[[i]] = binddf
}
sim_df = do.call(rbind,df_list)
sim_df %>%
group_by(answer, condition) %>%
summarize(n = n()/288)
sim_model = brm(answer ~ condition,
data=sim_df,
family="categorical")
summary(sim_model)
View(sim_df)
sim_model = brm(answer ~ condition + (condition|ppt),
data=sim_df,
family="categorical")
summary(sim_model)
conditional_effects(sim_model, categorical = TRUE)
get_prior(sim_model)
summary(sim_model)
get_prior(sim_model)
.15*(sqrt(5429))
sqrt(5429)
.15*(sqrt(1034))
.15*(sqrt(288))
prior_check = c(set_prior("normal(.15, 1)", class = "Intercept", dpar = "muis"),
set_prior("normal(.22, 1)", class = "Intercept", dpar = "muisnot"),
set_prior("normal(1.26, 1)", class = "b", dpar = "muis", coef = "conditionartifact"))
sim_model_priors = brm(answer ~ condition + (condition|ppt),
priors = prior_check,
data=sim_df,
family="categorical")
sim_model_priors = brm(answer ~ condition + (condition|ppt),
prior = prior_check,
data=sim_df,
family="categorical")
summary(sim_model)
get_prior(sim_model)
prior_check = c(set_prior("normal(.15, 2)", class = "Intercept", dpar = "muis"),
set_prior("normal(.22, 2)", class = "Intercept", dpar = "muisnot"),
set_prior("normal(.76, 2)", class = "b", dpar = "muis", coef = "conditionnatural_kind"),
set_prior("normal(1.26, 2)", class = "b", dpar = "muisnot", coef = "conditionnatural_kind"),
set_prior("normal(1.4, 2)", class = "b", dpar = "muis", coef = "muis_conditionartifact"),
set_prior("normal(2.59, 2)", class = "b", dpar = "muisnot", coef = "muis_conditionartifact"))
get_prior(b2)
View(senses_tidy)
senses_tidy$CategoryType
unique(senses_tidy$CategoryType)
senses_tidy$CategoryType
senses_tidy$CategoryType = as.factor(senses_tidy$CategoryType)
senses_tidy$CategoryType = as.factor(senses_tidy$CategoryType)
senses_tidy$CategoryType = as.factor(senses_tidy$CategoryType)
senses_tidy$CategoryType = as.factor(senses_tidy$CategoryType)
senses_tidy$CategoryType = relevel(senses_tidy$CategoryType, ref = "Value")
unique(senses_tidy$CategoryType)
prior_check = c(set_prior("normal(.15, 2)", class = "Intercept", dpar = "muIs"),
set_prior("normal(.22, 2)", class = "Intercept", dpar = "muIsnot"),
set_prior("normal(.76, 2)", class = "b", dpar = "muIs", coef = "CategoryTypeNatural"),
set_prior("normal(1.26, 2)", class = "b", dpar = "muIsnot", coef = "CategoryTypeNatural"),
set_prior("normal(1.4, 2)", class = "b", dpar = "muIs", coef = "muis_conditionArtifact"),
set_prior("normal(2.59, 2)", class = "b", dpar = "muIsnot", coef = "muis_conditionArtifact"))
b2 <- brm(Selection ~ CategoryType + (CategoryType | Participant),
prior = prior_check,
data=senses_tidy,
family="categorical")
senses_tidy$CategoryType = as.factor(senses_tidy$CategoryType)
senses_tidy$CategoryType = relevel(senses_tidy$CategoryType, ref = "Value")
prior_check = c(set_prior("normal(.15, 2)", class = "Intercept", dpar = "muIs"),
set_prior("normal(.22, 2)", class = "Intercept", dpar = "muIsnot"),
set_prior("normal(.76, 2)", class = "b", dpar = "muIs", coef = "CategoryTypeNatural"),
set_prior("normal(1.26, 2)", class = "b", dpar = "muIsnot", coef = "CategoryTypeNatural"),
set_prior("normal(1.4, 2)", class = "b", dpar = "muIs", coef = "muis_conditionArtifact"),
set_prior("normal(2.59, 2)", class = "b", dpar = "muIsnot", coef = "muis_conditionArtifact"))
get_prior(b2)
get_prior(b2)
prior_check = c(set_prior("normal(.15, 2)", class = "Intercept", dpar = "muIs"),
set_prior("normal(.22, 2)", class = "Intercept", dpar = "muIsnot"),
set_prior("normal(.76, 2)", class = "b", dpar = "muIs", coef = "CategoryTypeNatural"),
set_prior("normal(1.26, 2)", class = "b", dpar = "muIsnot", coef = "CategoryTypeNatural"),
set_prior("normal(1.4, 2)", class = "b", dpar = "muIs", coef = "CategoryTypeArtifact"),
set_prior("normal(2.59, 2)", class = "b", dpar = "muIsnot", coef = "CategoryTypeArtifact"))
b2 <- brm(Selection ~ CategoryType + (CategoryType | Participant),
prior = prior_check,
data=senses_tidy,
family="categorical")
conditional_effects(b2, categorical = TRUE)
b2 <- brm(Selection ~ CategoryType + (CategoryType | Participant),
#    prior = prior_check,
data=senses_tidy,
family="categorical")
summary(b2)
conditional_effects(b2, categorical = TRUE)
senses_tidy %>%
group_by(Selection) %>%
summarise(n = n())
senses_tidy %>%
group_by(Selection, CategoryType) %>%
summarise(n = n())
senses_tidy %>%
group_by(Selection) %>%
summarise(n = n())
senses_tidy %>%
group_by(CategoryType) %>%
summarise(n = n())
senses_tidy %>%
group_by(Selection, CategoryType) %>%
summarise(n = n()/288)
es= senses_tidy %>%
group_by(Selection, CategoryType) %>%
summarise(n = n()/288)
View(es)
